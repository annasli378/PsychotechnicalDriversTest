
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001288  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800184  00800184  000013a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e6  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e5  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fe  00000000  00000000  00003073  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bce  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004da6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3b       	cpi	r26, 0xBB	; 187
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 12 07 	call	0xe24	; 0xe24 <main>
      9e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:
void LCD_Print (char *str);
void LCD_Printpos(char row, char pos, char *str);

// PRZERWANIE OBS£UGA
ISR(TIMER0_COMPA_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	8f 93       	push	r24
      b4:	9f 93       	push	r25
      b6:	af 93       	push	r26
      b8:	bf 93       	push	r27
	counter++;
      ba:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <counter>
      be:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <counter+0x1>
      c2:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <counter+0x2>
      c6:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <counter+0x3>
      ca:	01 96       	adiw	r24, 0x01	; 1
      cc:	a1 1d       	adc	r26, r1
      ce:	b1 1d       	adc	r27, r1
      d0:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <counter>
      d4:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <counter+0x1>
      d8:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <counter+0x2>
      dc:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <counter+0x3>
	if (counter > 1500) {
      e0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <counter>
      e4:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <counter+0x1>
      e8:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <counter+0x2>
      ec:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <counter+0x3>
      f0:	8d 3d       	cpi	r24, 0xDD	; 221
      f2:	95 40       	sbci	r25, 0x05	; 5
      f4:	a1 05       	cpc	r26, r1
      f6:	b1 05       	cpc	r27, r1
      f8:	70 f1       	brcs	.+92     	; 0x156 <__vector_14+0xb0>
		counter = 0;
      fa:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <counter>
      fe:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <counter+0x1>
     102:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <counter+0x2>
     106:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <counter+0x3>
		loop ++ ;
     10a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <loop>
     10e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <loop+0x1>
     112:	a0 91 ad 01 	lds	r26, 0x01AD	; 0x8001ad <loop+0x2>
     116:	b0 91 ae 01 	lds	r27, 0x01AE	; 0x8001ae <loop+0x3>
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	a1 1d       	adc	r26, r1
     11e:	b1 1d       	adc	r27, r1
     120:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <loop>
     124:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <loop+0x1>
     128:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <loop+0x2>
     12c:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <loop+0x3>
		clockp++;
     130:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <clockp>
     134:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <clockp+0x1>
     138:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <clockp+0x2>
     13c:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <clockp+0x3>
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	a1 1d       	adc	r26, r1
     144:	b1 1d       	adc	r27, r1
     146:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <clockp>
     14a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <clockp+0x1>
     14e:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <clockp+0x2>
     152:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <clockp+0x3>
	}
	if (clockp > 10000) {
     156:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <clockp>
     15a:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <clockp+0x1>
     15e:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <clockp+0x2>
     162:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <clockp+0x3>
     166:	81 31       	cpi	r24, 0x11	; 17
     168:	97 42       	sbci	r25, 0x27	; 39
     16a:	a1 05       	cpc	r26, r1
     16c:	b1 05       	cpc	r27, r1
     16e:	40 f0       	brcs	.+16     	; 0x180 <__vector_14+0xda>
		clockp = 0;
     170:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <clockp>
     174:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <clockp+0x1>
     178:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <clockp+0x2>
     17c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <clockp+0x3>
	}
}
     180:	bf 91       	pop	r27
     182:	af 91       	pop	r26
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	2f 91       	pop	r18
     18a:	0f 90       	pop	r0
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	0f 90       	pop	r0
     190:	1f 90       	pop	r1
     192:	18 95       	reti

00000194 <minTime>:
    while (1) 
    {	 }
}

int minTime(int arr[], int n) //ZNAJDOWANIE MINIMUM
{
     194:	dc 01       	movw	r26, r24
	int min = arr[0];
     196:	8d 91       	ld	r24, X+
     198:	9c 91       	ld	r25, X
     19a:	11 97       	sbiw	r26, 0x01	; 1
	for (int i = 1; i < n; i++) {
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	10 c0       	rjmp	.+32     	; 0x1c2 <minTime+0x2e>
		if (arr[i] > 0) { // WYKLUCZENIE POZYCJI ¯Ó£TEJ DIODY
     1a2:	f9 01       	movw	r30, r18
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	ea 0f       	add	r30, r26
     1aa:	fb 1f       	adc	r31, r27
     1ac:	40 81       	ld	r20, Z
     1ae:	51 81       	ldd	r21, Z+1	; 0x01
     1b0:	14 16       	cp	r1, r20
     1b2:	15 06       	cpc	r1, r21
     1b4:	24 f4       	brge	.+8      	; 0x1be <minTime+0x2a>
			if (arr[i] < min) {
     1b6:	48 17       	cp	r20, r24
     1b8:	59 07       	cpc	r21, r25
     1ba:	0c f4       	brge	.+2      	; 0x1be <minTime+0x2a>
				min = arr[i];
     1bc:	ca 01       	movw	r24, r20
}

int minTime(int arr[], int n) //ZNAJDOWANIE MINIMUM
{
	int min = arr[0];
	for (int i = 1; i < n; i++) {
     1be:	2f 5f       	subi	r18, 0xFF	; 255
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	26 17       	cp	r18, r22
     1c4:	37 07       	cpc	r19, r23
     1c6:	6c f3       	brlt	.-38     	; 0x1a2 <minTime+0xe>
				min = arr[i];
			}
		}
	}
	return min;
}
     1c8:	08 95       	ret

000001ca <timer_setup>:
void timer_setup() //USTAWIENIA TIMERA
{
	TCNT0 = 0;
     1ca:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM12); // CTC
     1cc:	84 b5       	in	r24, 0x24	; 36
     1ce:	88 60       	ori	r24, 0x08	; 8
     1d0:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<CS02); //1024 PRESCALER
     1d2:	84 b5       	in	r24, 0x24	; 36
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	84 bd       	out	0x24, r24	; 36
	TIMSK0|=(1<<OCIE0A); //ODBLOKOWANIE PRZERWAÑ TIMER1
     1d8:	ee e6       	ldi	r30, 0x6E	; 110
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	82 60       	ori	r24, 0x02	; 2
     1e0:	80 83       	st	Z, r24
	OCR0A = 31250;
     1e2:	82 e1       	ldi	r24, 0x12	; 18
     1e4:	87 bd       	out	0x27, r24	; 39
	sei();
     1e6:	78 94       	sei
     1e8:	08 95       	ret

000001ea <timer_start>:
}
void timer_start()
{
	TCCR0B |= (1<<CS00) ;
     1ea:	85 b5       	in	r24, 0x25	; 37
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	85 bd       	out	0x25, r24	; 37
     1f0:	08 95       	ret

000001f2 <timer_stop>:
}
void timer_stop()
{
	TCCR0A &= ~ ( (1<<CS00));
     1f2:	84 b5       	in	r24, 0x24	; 36
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
     1f8:	16 bc       	out	0x26, r1	; 38
	loop=0;
     1fa:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <loop>
     1fe:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <loop+0x1>
     202:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <loop+0x2>
     206:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <loop+0x3>
     20a:	08 95       	ret

0000020c <_delay20ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	89 ef       	ldi	r24, 0xF9	; 249
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	21 50       	subi	r18, 0x01	; 1
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <_delay20ms+0x6>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <_delay20ms+0x10>
     21c:	00 00       	nop
     21e:	08 95       	ret

00000220 <_delay3000ms>:
}
void _delay3000ms(int dioda)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	ec 01       	movw	r28, r24
	loop = 0;
     226:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <loop>
     22a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <loop+0x1>
     22e:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <loop+0x2>
     232:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <loop+0x3>
	int d = dioda; // 2,1,0
	timer_start();
     236:	0e 94 f5 00 	call	0x1ea	; 0x1ea <timer_start>
	while(loop!=100){
     23a:	3a c0       	rjmp	.+116    	; 0x2b0 <_delay3000ms+0x90>
		if (PINB & (1<< PINB3)) {//LOW -> HIGH PB3 - wcisniecie przycisku dla diody zielonej (lewy)
     23c:	1b 9b       	sbis	0x03, 3	; 3
     23e:	17 c0       	rjmp	.+46     	; 0x26e <_delay3000ms+0x4e>
			t_green = clockp ;
     240:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <clockp>
     244:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <clockp+0x1>
     248:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <clockp+0x2>
     24c:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <clockp+0x3>
     250:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <t_green>
     254:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <t_green+0x1>
     258:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <t_green+0x2>
     25c:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <t_green+0x3>
			_delay20ms();
     260:	0e 94 06 01 	call	0x20c	; 0x20c <_delay20ms>
			if (d != 0) { //ZIELONA LED NIE ZAWICONA A NACINIÊTY PRZYCISK -> generuje blad
     264:	20 97       	sbiw	r28, 0x00	; 0
     266:	19 f0       	breq	.+6      	; 0x26e <_delay3000ms+0x4e>
				G_mistake = true;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <G_mistake>
			}
		}
		if (PINB & (1<< PINB4)) { //LOW -> HIGH PB4 - wcisniecie przycisku dla diody zoltej (srodkowy)
     26e:	1c 9b       	sbis	0x03, 4	; 3
     270:	05 c0       	rjmp	.+10     	; 0x27c <_delay3000ms+0x5c>
			_delay20ms(); 
     272:	0e 94 06 01 	call	0x20c	; 0x20c <_delay20ms>
			Y_mistake = true; //TEGO PRZYCIKU NIE -> generuje blad
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Y_mistake>
		}
		if (PINB & (1<< PINB5)) { //LOW -> HIGH PB5 - wcisniecie przycisku dla diody czerwonej (prawy)
     27c:	1d 9b       	sbis	0x03, 5	; 3
     27e:	18 c0       	rjmp	.+48     	; 0x2b0 <_delay3000ms+0x90>
			t_red = clockp;
     280:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <clockp>
     284:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <clockp+0x1>
     288:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <clockp+0x2>
     28c:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <clockp+0x3>
     290:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <t_red>
     294:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <t_red+0x1>
     298:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <t_red+0x2>
     29c:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <t_red+0x3>
			_delay20ms();
     2a0:	0e 94 06 01 	call	0x20c	; 0x20c <_delay20ms>
			if (d != 2) { //CZERWONA LED NIE ZAWICONA A NACINIÊTY PRZYCISK -> generuje blad
     2a4:	c2 30       	cpi	r28, 0x02	; 2
     2a6:	d1 05       	cpc	r29, r1
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <_delay3000ms+0x90>
				R_mistake = true;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <R_mistake>
void _delay3000ms(int dioda)
{
	loop = 0;
	int d = dioda; // 2,1,0
	timer_start();
	while(loop!=100){
     2b0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <loop>
     2b4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <loop+0x1>
     2b8:	a0 91 ad 01 	lds	r26, 0x01AD	; 0x8001ad <loop+0x2>
     2bc:	b0 91 ae 01 	lds	r27, 0x01AE	; 0x8001ae <loop+0x3>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	a1 05       	cpc	r26, r1
     2c6:	b1 05       	cpc	r27, r1
     2c8:	09 f0       	breq	.+2      	; 0x2cc <_delay3000ms+0xac>
     2ca:	b8 cf       	rjmp	.-144    	; 0x23c <_delay3000ms+0x1c>
			if (d != 2) { //CZERWONA LED NIE ZAWICONA A NACINIÊTY PRZYCISK -> generuje blad
				R_mistake = true;
			}
		}	
	}
	timer_stop();	
     2cc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <timer_stop>
	return;
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <test1>:

void test1() //KOLEJNOÆ: R G Y R Y G R G R Y 
{	
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	64 97       	sbiw	r28, 0x14	; 20
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
	int t_diody = 0;
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {2, 0, 1, 2, 1, 0, 2, 0, 2, 1}; // RED - PB2, YELLOW - PB1, GREEN - PB0
     2fc:	84 e1       	ldi	r24, 0x14	; 20
     2fe:	e4 e0       	ldi	r30, 0x04	; 4
     300:	f1 e0       	ldi	r31, 0x01	; 1
     302:	de 01       	movw	r26, r28
     304:	11 96       	adiw	r26, 0x01	; 1
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	8a 95       	dec	r24
     30c:	e1 f7       	brne	.-8      	; 0x306 <test1+0x30>
	for(int i=0; i<10; i++) { //PÊTLA PO KA¯DEJ DIODZIE
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	79 c1       	rjmp	.+754    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
		if (kolejnosc1[i] == 1) { //¯Ó£TY
     314:	f8 01       	movw	r30, r16
     316:	ee 0f       	add	r30, r30
     318:	ff 1f       	adc	r31, r31
     31a:	41 e0       	ldi	r20, 0x01	; 1
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	4c 0f       	add	r20, r28
     320:	5d 1f       	adc	r21, r29
     322:	e4 0f       	add	r30, r20
     324:	f5 1f       	adc	r31, r21
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	91 05       	cpc	r25, r1
     32e:	09 f0       	breq	.+2      	; 0x332 <test1+0x5c>
     330:	46 c0       	rjmp	.+140    	; 0x3be <test1+0xe8>
			PORTB |= 1<<kolejnosc1[i];
     332:	25 b1       	in	r18, 0x05	; 5
     334:	aa 24       	eor	r10, r10
     336:	a3 94       	inc	r10
     338:	b1 2c       	mov	r11, r1
     33a:	a5 01       	movw	r20, r10
     33c:	02 c0       	rjmp	.+4      	; 0x342 <test1+0x6c>
     33e:	44 0f       	add	r20, r20
     340:	55 1f       	adc	r21, r21
     342:	8a 95       	dec	r24
     344:	e2 f7       	brpl	.-8      	; 0x33e <test1+0x68>
     346:	ca 01       	movw	r24, r20
     348:	82 2b       	or	r24, r18
     34a:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     34c:	78 01       	movw	r14, r16
     34e:	ee 0c       	add	r14, r14
     350:	ff 1c       	adc	r15, r15
     352:	e1 e0       	ldi	r30, 0x01	; 1
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ec 0f       	add	r30, r28
     358:	fd 1f       	adc	r31, r29
     35a:	ee 0d       	add	r30, r14
     35c:	ff 1d       	adc	r31, r15
     35e:	d0 80       	ld	r13, Z
     360:	8d 2d       	mov	r24, r13
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     368:	85 b1       	in	r24, 0x05	; 5
     36a:	02 c0       	rjmp	.+4      	; 0x370 <test1+0x9a>
     36c:	aa 0c       	add	r10, r10
     36e:	bb 1c       	adc	r11, r11
     370:	da 94       	dec	r13
     372:	e2 f7       	brpl	.-8      	; 0x36c <test1+0x96>
     374:	a0 94       	com	r10
     376:	a8 22       	and	r10, r24
     378:	a5 b8       	out	0x05, r10	; 5
			t_wyniki[i] = -1; 
     37a:	f7 01       	movw	r30, r14
     37c:	e9 56       	subi	r30, 0x69	; 105
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
			if (Y_mistake) { //JELI WCINIÊTY ZOSTA£ RODKOWY - B£¥D++, ZDJ¥Æ FLAGÊ
     388:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Y_mistake>
     38c:	88 23       	and	r24, r24
     38e:	09 f4       	brne	.+2      	; 0x392 <test1+0xbc>
     390:	38 c1       	rjmp	.+624    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
				liczBledy++;
     392:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     396:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     39a:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     39e:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	a1 1d       	adc	r26, r1
     3a6:	b1 1d       	adc	r27, r1
     3a8:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     3ac:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     3b0:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     3b4:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				Y_mistake = false;
     3b8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Y_mistake>
     3bc:	22 c1       	rjmp	.+580    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
		} 
		else if (kolejnosc1[i] == 0) { //ZIELONY
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <test1+0xee>
     3c2:	90 c0       	rjmp	.+288    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			t_diody = clockp;
     3c4:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     3c8:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     3cc:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     3d0:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     3d4:	25 b1       	in	r18, 0x05	; 5
     3d6:	ee 24       	eor	r14, r14
     3d8:	e3 94       	inc	r14
     3da:	f1 2c       	mov	r15, r1
     3dc:	a7 01       	movw	r20, r14
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <test1+0x10e>
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	8a 95       	dec	r24
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <test1+0x10a>
     3e8:	ca 01       	movw	r24, r20
     3ea:	82 2b       	or	r24, r18
     3ec:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     3ee:	f8 01       	movw	r30, r16
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	8c 0f       	add	r24, r28
     3fa:	9d 1f       	adc	r25, r29
     3fc:	e8 0f       	add	r30, r24
     3fe:	f9 1f       	adc	r31, r25
     400:	d0 80       	ld	r13, Z
     402:	8d 2d       	mov	r24, r13
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     40a:	85 b1       	in	r24, 0x05	; 5
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40e:	ee 0c       	add	r14, r14
     410:	ff 1c       	adc	r15, r15
     412:	da 94       	dec	r13
     414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     416:	e0 94       	com	r14
     418:	e8 22       	and	r14, r24
     41a:	e5 b8       	out	0x05, r14	; 5
			if (R_mistake) { //B£ÊDNIE WCINIÊTO
     41c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <R_mistake>
     420:	88 23       	and	r24, r24
     422:	f9 f0       	breq	.+62     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				liczBledy++;
     424:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     428:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     42c:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     430:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	a1 1d       	adc	r26, r1
     438:	b1 1d       	adc	r27, r1
     43a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     43e:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     442:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     446:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				R_mistake = false;
     44a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <R_mistake>
				t_wyniki[i] = 3000;
     44e:	f8 01       	movw	r30, r16
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e9 56       	subi	r30, 0x69	; 105
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	88 eb       	ldi	r24, 0xB8	; 184
     45a:	9b e0       	ldi	r25, 0x0B	; 11
     45c:	91 83       	std	Z+1, r25	; 0x01
     45e:	80 83       	st	Z, r24
     460:	d0 c0       	rjmp	.+416    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
			else if (t_green != 0) { //POPRAWNIE WCINIÊTO
     462:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     466:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     46a:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     46e:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
     472:	89 2b       	or	r24, r25
     474:	8a 2b       	or	r24, r26
     476:	8b 2b       	or	r24, r27
     478:	c1 f0       	breq	.+48     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
				t_przycisk = t_green;
     47a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     47e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     482:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     486:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
				t_miedzy = t_przycisk -  t_diody; //OBLICZ RÓ¯NICE
     48a:	88 19       	sub	r24, r8
     48c:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; //x30 ¯EBY MIEÆ MS
     48e:	4e e1       	ldi	r20, 0x1E	; 30
     490:	48 9f       	mul	r20, r24
     492:	90 01       	movw	r18, r0
     494:	49 9f       	mul	r20, r25
     496:	30 0d       	add	r19, r0
     498:	11 24       	eor	r1, r1
     49a:	f8 01       	movw	r30, r16
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	e9 56       	subi	r30, 0x69	; 105
     4a2:	fe 4f       	sbci	r31, 0xFE	; 254
     4a4:	31 83       	std	Z+1, r19	; 0x01
     4a6:	20 83       	st	Z, r18
     4a8:	ac c0       	rjmp	.+344    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
			else { // NIE NACINIÊTO - MAX CZAS DO TABLICY I BL¥D++
				liczBledy++; 
     4aa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     4ae:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     4b2:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     4b6:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	a1 1d       	adc	r26, r1
     4be:	b1 1d       	adc	r27, r1
     4c0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     4c4:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     4c8:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     4cc:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     4d0:	f8 01       	movw	r30, r16
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	e9 56       	subi	r30, 0x69	; 105
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	88 eb       	ldi	r24, 0xB8	; 184
     4dc:	9b e0       	ldi	r25, 0x0B	; 11
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	80 83       	st	Z, r24
     4e2:	8f c0       	rjmp	.+286    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
		}
		else { //CZERWONY
			t_diody = clockp;
     4e4:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     4e8:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     4ec:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     4f0:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     4f4:	25 b1       	in	r18, 0x05	; 5
     4f6:	ee 24       	eor	r14, r14
     4f8:	e3 94       	inc	r14
     4fa:	f1 2c       	mov	r15, r1
     4fc:	a7 01       	movw	r20, r14
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	8a 95       	dec	r24
     506:	e2 f7       	brpl	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     508:	ca 01       	movw	r24, r20
     50a:	82 2b       	or	r24, r18
     50c:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     50e:	f8 01       	movw	r30, r16
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	8c 0f       	add	r24, r28
     51a:	9d 1f       	adc	r25, r29
     51c:	e8 0f       	add	r30, r24
     51e:	f9 1f       	adc	r31, r25
     520:	d0 80       	ld	r13, Z
     522:	8d 2d       	mov	r24, r13
     524:	91 81       	ldd	r25, Z+1	; 0x01
     526:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     52a:	85 b1       	in	r24, 0x05	; 5
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     52e:	ee 0c       	add	r14, r14
     530:	ff 1c       	adc	r15, r15
     532:	da 94       	dec	r13
     534:	e2 f7       	brpl	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     536:	e0 94       	com	r14
     538:	e8 22       	and	r14, r24
     53a:	e5 b8       	out	0x05, r14	; 5
			if (G_mistake) { //B£ÊDNIE WCINIÊTO
     53c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <G_mistake>
     540:	88 23       	and	r24, r24
     542:	f9 f0       	breq	.+62     	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
				liczBledy++;
     544:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     548:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     54c:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     550:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	a1 1d       	adc	r26, r1
     558:	b1 1d       	adc	r27, r1
     55a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     55e:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     562:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     566:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				G_mistake = false;
     56a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <G_mistake>
				t_wyniki[i] = 3000;
     56e:	f8 01       	movw	r30, r16
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e9 56       	subi	r30, 0x69	; 105
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	88 eb       	ldi	r24, 0xB8	; 184
     57a:	9b e0       	ldi	r25, 0x0B	; 11
     57c:	91 83       	std	Z+1, r25	; 0x01
     57e:	80 83       	st	Z, r24
     580:	40 c0       	rjmp	.+128    	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
			else if (t_red != 0) { //POPRAWNIE WCINIÊTO
     582:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     586:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     58a:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     58e:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
     592:	89 2b       	or	r24, r25
     594:	8a 2b       	or	r24, r26
     596:	8b 2b       	or	r24, r27
     598:	c1 f0       	breq	.+48     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
				t_przycisk = t_red;
     59a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     59e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     5a2:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     5a6:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
				t_miedzy = t_przycisk -  t_diody;
     5aa:	88 19       	sub	r24, r8
     5ac:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; 
     5ae:	4e e1       	ldi	r20, 0x1E	; 30
     5b0:	48 9f       	mul	r20, r24
     5b2:	90 01       	movw	r18, r0
     5b4:	49 9f       	mul	r20, r25
     5b6:	30 0d       	add	r19, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	f8 01       	movw	r30, r16
     5bc:	ee 0f       	add	r30, r30
     5be:	ff 1f       	adc	r31, r31
     5c0:	e9 56       	subi	r30, 0x69	; 105
     5c2:	fe 4f       	sbci	r31, 0xFE	; 254
     5c4:	31 83       	std	Z+1, r19	; 0x01
     5c6:	20 83       	st	Z, r18
     5c8:	1c c0       	rjmp	.+56     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
			}
			else { // NIE NACINIÊTO - MAX CZAS DO TABLICY I BL¥D++
				liczBledy++;
     5ca:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     5ce:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     5d2:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     5d6:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	a1 1d       	adc	r26, r1
     5de:	b1 1d       	adc	r27, r1
     5e0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     5e4:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     5e8:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     5ec:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     5f0:	f8 01       	movw	r30, r16
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e9 56       	subi	r30, 0x69	; 105
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	88 eb       	ldi	r24, 0xB8	; 184
     5fc:	9b e0       	ldi	r25, 0x0B	; 11
     5fe:	91 83       	std	Z+1, r25	; 0x01
     600:	80 83       	st	Z, r24
{	
	int t_diody = 0;
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {2, 0, 1, 2, 1, 0, 2, 0, 2, 1}; // RED - PB2, YELLOW - PB1, GREEN - PB0
	for(int i=0; i<10; i++) { //PÊTLA PO KA¯DEJ DIODZIE
     602:	0f 5f       	subi	r16, 0xFF	; 255
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	0a 30       	cpi	r16, 0x0A	; 10
     608:	11 05       	cpc	r17, r1
     60a:	0c f4       	brge	.+2      	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
     60c:	83 ce       	rjmp	.-762    	; 0x314 <test1+0x3e>
				t_wyniki[i] = 3000;
			}
		}
	}
	return;
}
     60e:	64 96       	adiw	r28, 0x14	; 20
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	bf 90       	pop	r11
     62a:	af 90       	pop	r10
     62c:	9f 90       	pop	r9
     62e:	8f 90       	pop	r8
     630:	08 95       	ret

00000632 <test2>:

void test2() //KOLEJNOÆ: Y R Y G R R G Y G R
{
     632:	8f 92       	push	r8
     634:	9f 92       	push	r9
     636:	af 92       	push	r10
     638:	bf 92       	push	r11
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	64 97       	sbiw	r28, 0x14	; 20
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	int t_diody = 0;
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {1, 2, 1, 0, 2, 0, 2, 1, 0, 2};
     658:	84 e1       	ldi	r24, 0x14	; 20
     65a:	e8 e1       	ldi	r30, 0x18	; 24
     65c:	f1 e0       	ldi	r31, 0x01	; 1
     65e:	de 01       	movw	r26, r28
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	8a 95       	dec	r24
     668:	e1 f7       	brne	.-8      	; 0x662 <test2+0x30>
	for(int i=0; i<10; i++) { //PÊTLA PO KA¯DEJ
     66a:	00 e0       	ldi	r16, 0x00	; 0
     66c:	10 e0       	ldi	r17, 0x00	; 0
     66e:	79 c1       	rjmp	.+754    	; 0x962 <__stack+0x63>
		if (kolejnosc1[i] == 1) {
     670:	f8 01       	movw	r30, r16
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	4c 0f       	add	r20, r28
     67c:	5d 1f       	adc	r21, r29
     67e:	e4 0f       	add	r30, r20
     680:	f5 1f       	adc	r31, r21
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	09 f0       	breq	.+2      	; 0x68e <test2+0x5c>
     68c:	46 c0       	rjmp	.+140    	; 0x71a <test2+0xe8>
			PORTB |= 1<<kolejnosc1[i];
     68e:	25 b1       	in	r18, 0x05	; 5
     690:	aa 24       	eor	r10, r10
     692:	a3 94       	inc	r10
     694:	b1 2c       	mov	r11, r1
     696:	a5 01       	movw	r20, r10
     698:	02 c0       	rjmp	.+4      	; 0x69e <test2+0x6c>
     69a:	44 0f       	add	r20, r20
     69c:	55 1f       	adc	r21, r21
     69e:	8a 95       	dec	r24
     6a0:	e2 f7       	brpl	.-8      	; 0x69a <test2+0x68>
     6a2:	ca 01       	movw	r24, r20
     6a4:	82 2b       	or	r24, r18
     6a6:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     6a8:	78 01       	movw	r14, r16
     6aa:	ee 0c       	add	r14, r14
     6ac:	ff 1c       	adc	r15, r15
     6ae:	e1 e0       	ldi	r30, 0x01	; 1
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	ec 0f       	add	r30, r28
     6b4:	fd 1f       	adc	r31, r29
     6b6:	ee 0d       	add	r30, r14
     6b8:	ff 1d       	adc	r31, r15
     6ba:	d0 80       	ld	r13, Z
     6bc:	8d 2d       	mov	r24, r13
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     6c4:	85 b1       	in	r24, 0x05	; 5
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <test2+0x9a>
     6c8:	aa 0c       	add	r10, r10
     6ca:	bb 1c       	adc	r11, r11
     6cc:	da 94       	dec	r13
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <test2+0x96>
     6d0:	a0 94       	com	r10
     6d2:	a8 22       	and	r10, r24
     6d4:	a5 b8       	out	0x05, r10	; 5
			t_wyniki[i] = -1;
     6d6:	f7 01       	movw	r30, r14
     6d8:	e9 56       	subi	r30, 0x69	; 105
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	91 83       	std	Z+1, r25	; 0x01
     6e2:	80 83       	st	Z, r24
			if (Y_mistake) {
     6e4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Y_mistake>
     6e8:	88 23       	and	r24, r24
     6ea:	09 f4       	brne	.+2      	; 0x6ee <test2+0xbc>
     6ec:	38 c1       	rjmp	.+624    	; 0x95e <__stack+0x5f>
				liczBledy++;
     6ee:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     6f2:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     6f6:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     6fa:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	a1 1d       	adc	r26, r1
     702:	b1 1d       	adc	r27, r1
     704:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     708:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     70c:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     710:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				Y_mistake = false;
     714:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Y_mistake>
     718:	22 c1       	rjmp	.+580    	; 0x95e <__stack+0x5f>
			}
		}
		else if (kolejnosc1[i] == 0) {
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	09 f0       	breq	.+2      	; 0x720 <test2+0xee>
     71e:	90 c0       	rjmp	.+288    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			t_diody = clockp;
     720:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     724:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     728:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     72c:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     730:	25 b1       	in	r18, 0x05	; 5
     732:	ee 24       	eor	r14, r14
     734:	e3 94       	inc	r14
     736:	f1 2c       	mov	r15, r1
     738:	a7 01       	movw	r20, r14
     73a:	02 c0       	rjmp	.+4      	; 0x740 <test2+0x10e>
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	8a 95       	dec	r24
     742:	e2 f7       	brpl	.-8      	; 0x73c <test2+0x10a>
     744:	ca 01       	movw	r24, r20
     746:	82 2b       	or	r24, r18
     748:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     74a:	f8 01       	movw	r30, r16
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	8c 0f       	add	r24, r28
     756:	9d 1f       	adc	r25, r29
     758:	e8 0f       	add	r30, r24
     75a:	f9 1f       	adc	r31, r25
     75c:	d0 80       	ld	r13, Z
     75e:	8d 2d       	mov	r24, r13
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     766:	85 b1       	in	r24, 0x05	; 5
     768:	02 c0       	rjmp	.+4      	; 0x76e <test2+0x13c>
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	da 94       	dec	r13
     770:	e2 f7       	brpl	.-8      	; 0x76a <test2+0x138>
     772:	e0 94       	com	r14
     774:	e8 22       	and	r14, r24
     776:	e5 b8       	out	0x05, r14	; 5
			if (R_mistake)	{
     778:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <R_mistake>
     77c:	88 23       	and	r24, r24
     77e:	f9 f0       	breq	.+62     	; 0x7be <test2+0x18c>
				liczBledy++;
     780:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     784:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     788:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     78c:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	a1 1d       	adc	r26, r1
     794:	b1 1d       	adc	r27, r1
     796:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     79a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     79e:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     7a2:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				R_mistake = false;
     7a6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <R_mistake>
				t_wyniki[i] = 3000;
     7aa:	f8 01       	movw	r30, r16
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e9 56       	subi	r30, 0x69	; 105
     7b2:	fe 4f       	sbci	r31, 0xFE	; 254
     7b4:	88 eb       	ldi	r24, 0xB8	; 184
     7b6:	9b e0       	ldi	r25, 0x0B	; 11
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
     7bc:	d0 c0       	rjmp	.+416    	; 0x95e <__stack+0x5f>
			}
			else if (t_green != 0) {
     7be:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     7c2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     7c6:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     7ca:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
     7ce:	89 2b       	or	r24, r25
     7d0:	8a 2b       	or	r24, r26
     7d2:	8b 2b       	or	r24, r27
     7d4:	c1 f0       	breq	.+48     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
				t_przycisk = t_green;
     7d6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     7da:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     7de:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     7e2:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
				t_miedzy = t_przycisk -  t_diody;  
     7e6:	88 19       	sub	r24, r8
     7e8:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; 
     7ea:	4e e1       	ldi	r20, 0x1E	; 30
     7ec:	48 9f       	mul	r20, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	49 9f       	mul	r20, r25
     7f2:	30 0d       	add	r19, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	f8 01       	movw	r30, r16
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	e9 56       	subi	r30, 0x69	; 105
     7fe:	fe 4f       	sbci	r31, 0xFE	; 254
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	20 83       	st	Z, r18
     804:	ac c0       	rjmp	.+344    	; 0x95e <__stack+0x5f>
			}
			else	{
				liczBledy++; 
     806:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     80a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     80e:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     812:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	a1 1d       	adc	r26, r1
     81a:	b1 1d       	adc	r27, r1
     81c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     820:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     824:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     828:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     82c:	f8 01       	movw	r30, r16
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	e9 56       	subi	r30, 0x69	; 105
     834:	fe 4f       	sbci	r31, 0xFE	; 254
     836:	88 eb       	ldi	r24, 0xB8	; 184
     838:	9b e0       	ldi	r25, 0x0B	; 11
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	80 83       	st	Z, r24
     83e:	8f c0       	rjmp	.+286    	; 0x95e <__stack+0x5f>
			}
		}
		else 	{
			t_diody = clockp;
     840:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     844:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     848:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     84c:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     850:	25 b1       	in	r18, 0x05	; 5
     852:	ee 24       	eor	r14, r14
     854:	e3 94       	inc	r14
     856:	f1 2c       	mov	r15, r1
     858:	a7 01       	movw	r20, r14
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85c:	44 0f       	add	r20, r20
     85e:	55 1f       	adc	r21, r21
     860:	8a 95       	dec	r24
     862:	e2 f7       	brpl	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     864:	ca 01       	movw	r24, r20
     866:	82 2b       	or	r24, r18
     868:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     86a:	f8 01       	movw	r30, r16
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	8c 0f       	add	r24, r28
     876:	9d 1f       	adc	r25, r29
     878:	e8 0f       	add	r30, r24
     87a:	f9 1f       	adc	r31, r25
     87c:	d0 80       	ld	r13, Z
     87e:	8d 2d       	mov	r24, r13
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     886:	85 b1       	in	r24, 0x05	; 5
     888:	02 c0       	rjmp	.+4      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     88a:	ee 0c       	add	r14, r14
     88c:	ff 1c       	adc	r15, r15
     88e:	da 94       	dec	r13
     890:	e2 f7       	brpl	.-8      	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
     892:	e0 94       	com	r14
     894:	e8 22       	and	r14, r24
     896:	e5 b8       	out	0x05, r14	; 5
			if (G_mistake)	{
     898:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <G_mistake>
     89c:	88 23       	and	r24, r24
     89e:	f9 f0       	breq	.+62     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
				liczBledy++;
     8a0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     8a4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     8a8:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     8ac:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	a1 1d       	adc	r26, r1
     8b4:	b1 1d       	adc	r27, r1
     8b6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     8ba:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     8be:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     8c2:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				G_mistake = false;
     8c6:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <G_mistake>
				t_wyniki[i] = 3000;
     8ca:	f8 01       	movw	r30, r16
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	e9 56       	subi	r30, 0x69	; 105
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	88 eb       	ldi	r24, 0xB8	; 184
     8d6:	9b e0       	ldi	r25, 0x0B	; 11
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
     8dc:	40 c0       	rjmp	.+128    	; 0x95e <__stack+0x5f>
			}
			else if (t_red != 0)	{
     8de:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     8e2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     8e6:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     8ea:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
     8ee:	89 2b       	or	r24, r25
     8f0:	8a 2b       	or	r24, r26
     8f2:	8b 2b       	or	r24, r27
     8f4:	c1 f0       	breq	.+48     	; 0x926 <__stack+0x27>
				t_przycisk = t_red;
     8f6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     8fa:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     8fe:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     902:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
				t_miedzy = t_przycisk -  t_diody;
     906:	88 19       	sub	r24, r8
     908:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; 
     90a:	4e e1       	ldi	r20, 0x1E	; 30
     90c:	48 9f       	mul	r20, r24
     90e:	90 01       	movw	r18, r0
     910:	49 9f       	mul	r20, r25
     912:	30 0d       	add	r19, r0
     914:	11 24       	eor	r1, r1
     916:	f8 01       	movw	r30, r16
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	e9 56       	subi	r30, 0x69	; 105
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	31 83       	std	Z+1, r19	; 0x01
     922:	20 83       	st	Z, r18
     924:	1c c0       	rjmp	.+56     	; 0x95e <__stack+0x5f>
			}
			else {	
				liczBledy++;
     926:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     92a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     92e:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     932:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	a1 1d       	adc	r26, r1
     93a:	b1 1d       	adc	r27, r1
     93c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     940:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     944:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     948:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     94c:	f8 01       	movw	r30, r16
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	e9 56       	subi	r30, 0x69	; 105
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	88 eb       	ldi	r24, 0xB8	; 184
     958:	9b e0       	ldi	r25, 0x0B	; 11
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	80 83       	st	Z, r24
{
	int t_diody = 0;
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {1, 2, 1, 0, 2, 0, 2, 1, 0, 2};
	for(int i=0; i<10; i++) { //PÊTLA PO KA¯DEJ
     95e:	0f 5f       	subi	r16, 0xFF	; 255
     960:	1f 4f       	sbci	r17, 0xFF	; 255
     962:	0a 30       	cpi	r16, 0x0A	; 10
     964:	11 05       	cpc	r17, r1
     966:	0c f4       	brge	.+2      	; 0x96a <__stack+0x6b>
     968:	83 ce       	rjmp	.-762    	; 0x670 <test2+0x3e>
				t_wyniki[i] = 3000;
			}
		}
	}		
	return;
}
     96a:	64 96       	adiw	r28, 0x14	; 20
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	9f 90       	pop	r9
     98a:	8f 90       	pop	r8
     98c:	08 95       	ret

0000098e <test3>:

void test3() //KOLEJNOÆ: G Y G R G R Y R Y G
{
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	64 97       	sbiw	r28, 0x14	; 20
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	int t_diody = 0;
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {0, 1, 0, 2, 0, 2, 1, 2, 1, 0};
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	ec e2       	ldi	r30, 0x2C	; 44
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	de 01       	movw	r26, r28
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	8a 95       	dec	r24
     9c4:	e1 f7       	brne	.-8      	; 0x9be <test3+0x30>
		
	//PÊTLA PO KA¯DEJ
	for(int i=0; i<10; i++)
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	79 c1       	rjmp	.+754    	; 0xcbe <test3+0x330>
	{
		if (kolejnosc1[i] == 1) 
     9cc:	f8 01       	movw	r30, r16
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	4c 0f       	add	r20, r28
     9d8:	5d 1f       	adc	r21, r29
     9da:	e4 0f       	add	r30, r20
     9dc:	f5 1f       	adc	r31, r21
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	91 05       	cpc	r25, r1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <test3+0x5c>
     9e8:	46 c0       	rjmp	.+140    	; 0xa76 <test3+0xe8>
		{
			PORTB |= 1<<kolejnosc1[i];
     9ea:	25 b1       	in	r18, 0x05	; 5
     9ec:	aa 24       	eor	r10, r10
     9ee:	a3 94       	inc	r10
     9f0:	b1 2c       	mov	r11, r1
     9f2:	a5 01       	movw	r20, r10
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <test3+0x6c>
     9f6:	44 0f       	add	r20, r20
     9f8:	55 1f       	adc	r21, r21
     9fa:	8a 95       	dec	r24
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <test3+0x68>
     9fe:	ca 01       	movw	r24, r20
     a00:	82 2b       	or	r24, r18
     a02:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     a04:	78 01       	movw	r14, r16
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	e1 e0       	ldi	r30, 0x01	; 1
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ec 0f       	add	r30, r28
     a10:	fd 1f       	adc	r31, r29
     a12:	ee 0d       	add	r30, r14
     a14:	ff 1d       	adc	r31, r15
     a16:	d0 80       	ld	r13, Z
     a18:	8d 2d       	mov	r24, r13
     a1a:	91 81       	ldd	r25, Z+1	; 0x01
     a1c:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     a20:	85 b1       	in	r24, 0x05	; 5
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <test3+0x9a>
     a24:	aa 0c       	add	r10, r10
     a26:	bb 1c       	adc	r11, r11
     a28:	da 94       	dec	r13
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <test3+0x96>
     a2c:	a0 94       	com	r10
     a2e:	a8 22       	and	r10, r24
     a30:	a5 b8       	out	0x05, r10	; 5
			t_wyniki[i] = -1;
     a32:	f7 01       	movw	r30, r14
     a34:	e9 56       	subi	r30, 0x69	; 105
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
			if (Y_mistake) 
     a40:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Y_mistake>
     a44:	88 23       	and	r24, r24
     a46:	09 f4       	brne	.+2      	; 0xa4a <test3+0xbc>
     a48:	38 c1       	rjmp	.+624    	; 0xcba <test3+0x32c>
			{
				liczBledy++;
     a4a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     a4e:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     a52:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     a56:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	a1 1d       	adc	r26, r1
     a5e:	b1 1d       	adc	r27, r1
     a60:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     a64:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     a68:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     a6c:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				Y_mistake = false;
     a70:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Y_mistake>
     a74:	22 c1       	rjmp	.+580    	; 0xcba <test3+0x32c>
			}
		}
		else if (kolejnosc1[i] == 0) 
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	09 f0       	breq	.+2      	; 0xa7c <test3+0xee>
     a7a:	90 c0       	rjmp	.+288    	; 0xb9c <test3+0x20e>
		{
			t_diody = clockp;
     a7c:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     a80:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     a84:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     a88:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     a8c:	25 b1       	in	r18, 0x05	; 5
     a8e:	ee 24       	eor	r14, r14
     a90:	e3 94       	inc	r14
     a92:	f1 2c       	mov	r15, r1
     a94:	a7 01       	movw	r20, r14
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <test3+0x10e>
     a98:	44 0f       	add	r20, r20
     a9a:	55 1f       	adc	r21, r21
     a9c:	8a 95       	dec	r24
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <test3+0x10a>
     aa0:	ca 01       	movw	r24, r20
     aa2:	82 2b       	or	r24, r18
     aa4:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     aa6:	f8 01       	movw	r30, r16
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8c 0f       	add	r24, r28
     ab2:	9d 1f       	adc	r25, r29
     ab4:	e8 0f       	add	r30, r24
     ab6:	f9 1f       	adc	r31, r25
     ab8:	d0 80       	ld	r13, Z
     aba:	8d 2d       	mov	r24, r13
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     ac2:	85 b1       	in	r24, 0x05	; 5
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <test3+0x13c>
     ac6:	ee 0c       	add	r14, r14
     ac8:	ff 1c       	adc	r15, r15
     aca:	da 94       	dec	r13
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <test3+0x138>
     ace:	e0 94       	com	r14
     ad0:	e8 22       	and	r14, r24
     ad2:	e5 b8       	out	0x05, r14	; 5
			if (R_mistake)
     ad4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <R_mistake>
     ad8:	88 23       	and	r24, r24
     ada:	f9 f0       	breq	.+62     	; 0xb1a <test3+0x18c>
			{
				liczBledy++;
     adc:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     ae0:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     ae4:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     ae8:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	a1 1d       	adc	r26, r1
     af0:	b1 1d       	adc	r27, r1
     af2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     af6:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     afa:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     afe:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				R_mistake = false;
     b02:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <R_mistake>
				t_wyniki[i] = 3000;
     b06:	f8 01       	movw	r30, r16
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	e9 56       	subi	r30, 0x69	; 105
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	88 eb       	ldi	r24, 0xB8	; 184
     b12:	9b e0       	ldi	r25, 0x0B	; 11
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	d0 c0       	rjmp	.+416    	; 0xcba <test3+0x32c>
			}
			else if (t_green != 0) 
     b1a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     b1e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     b22:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     b26:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
     b2a:	89 2b       	or	r24, r25
     b2c:	8a 2b       	or	r24, r26
     b2e:	8b 2b       	or	r24, r27
     b30:	c1 f0       	breq	.+48     	; 0xb62 <test3+0x1d4>
			{
				t_przycisk = t_green;
     b32:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <t_green>
     b36:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <t_green+0x1>
     b3a:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <t_green+0x2>
     b3e:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <t_green+0x3>
				t_miedzy = t_przycisk -  t_diody; 
     b42:	88 19       	sub	r24, r8
     b44:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; 
     b46:	4e e1       	ldi	r20, 0x1E	; 30
     b48:	48 9f       	mul	r20, r24
     b4a:	90 01       	movw	r18, r0
     b4c:	49 9f       	mul	r20, r25
     b4e:	30 0d       	add	r19, r0
     b50:	11 24       	eor	r1, r1
     b52:	f8 01       	movw	r30, r16
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e9 56       	subi	r30, 0x69	; 105
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	31 83       	std	Z+1, r19	; 0x01
     b5e:	20 83       	st	Z, r18
     b60:	ac c0       	rjmp	.+344    	; 0xcba <test3+0x32c>
			}
			else
			{
				liczBledy++; 
     b62:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     b66:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     b6a:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     b6e:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	a1 1d       	adc	r26, r1
     b76:	b1 1d       	adc	r27, r1
     b78:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     b7c:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     b80:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     b84:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     b88:	f8 01       	movw	r30, r16
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	e9 56       	subi	r30, 0x69	; 105
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	88 eb       	ldi	r24, 0xB8	; 184
     b94:	9b e0       	ldi	r25, 0x0B	; 11
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	8f c0       	rjmp	.+286    	; 0xcba <test3+0x32c>
			}
		}
		else 
		{
			t_diody = clockp;
     b9c:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <clockp>
     ba0:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <clockp+0x1>
     ba4:	a0 90 95 01 	lds	r10, 0x0195	; 0x800195 <clockp+0x2>
     ba8:	b0 90 96 01 	lds	r11, 0x0196	; 0x800196 <clockp+0x3>
			PORTB |= 1<<kolejnosc1[i];
     bac:	25 b1       	in	r18, 0x05	; 5
     bae:	ee 24       	eor	r14, r14
     bb0:	e3 94       	inc	r14
     bb2:	f1 2c       	mov	r15, r1
     bb4:	a7 01       	movw	r20, r14
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <test3+0x22e>
     bb8:	44 0f       	add	r20, r20
     bba:	55 1f       	adc	r21, r21
     bbc:	8a 95       	dec	r24
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <test3+0x22a>
     bc0:	ca 01       	movw	r24, r20
     bc2:	82 2b       	or	r24, r18
     bc4:	85 b9       	out	0x05, r24	; 5
			_delay3000ms(kolejnosc1[i]);
     bc6:	f8 01       	movw	r30, r16
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	8c 0f       	add	r24, r28
     bd2:	9d 1f       	adc	r25, r29
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	d0 80       	ld	r13, Z
     bda:	8d 2d       	mov	r24, r13
     bdc:	91 81       	ldd	r25, Z+1	; 0x01
     bde:	0e 94 10 01 	call	0x220	; 0x220 <_delay3000ms>
			PORTB &= ~(1<<kolejnosc1[i]);
     be2:	85 b1       	in	r24, 0x05	; 5
     be4:	02 c0       	rjmp	.+4      	; 0xbea <test3+0x25c>
     be6:	ee 0c       	add	r14, r14
     be8:	ff 1c       	adc	r15, r15
     bea:	da 94       	dec	r13
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <test3+0x258>
     bee:	e0 94       	com	r14
     bf0:	e8 22       	and	r14, r24
     bf2:	e5 b8       	out	0x05, r14	; 5
			if (G_mistake)
     bf4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <G_mistake>
     bf8:	88 23       	and	r24, r24
     bfa:	f9 f0       	breq	.+62     	; 0xc3a <test3+0x2ac>
			{
				liczBledy++;
     bfc:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     c00:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     c04:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     c08:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	a1 1d       	adc	r26, r1
     c10:	b1 1d       	adc	r27, r1
     c12:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     c16:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     c1a:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     c1e:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				G_mistake = false;
     c22:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <G_mistake>
				t_wyniki[i] = 3000;
     c26:	f8 01       	movw	r30, r16
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	e9 56       	subi	r30, 0x69	; 105
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	88 eb       	ldi	r24, 0xB8	; 184
     c32:	9b e0       	ldi	r25, 0x0B	; 11
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	40 c0       	rjmp	.+128    	; 0xcba <test3+0x32c>
			}
			else if (t_red != 0)
     c3a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     c3e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     c42:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     c46:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
     c4a:	89 2b       	or	r24, r25
     c4c:	8a 2b       	or	r24, r26
     c4e:	8b 2b       	or	r24, r27
     c50:	c1 f0       	breq	.+48     	; 0xc82 <test3+0x2f4>
			{
				t_przycisk = t_red;
     c52:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <t_red>
     c56:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <t_red+0x1>
     c5a:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <t_red+0x2>
     c5e:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <t_red+0x3>
				t_miedzy = t_przycisk -  t_diody;
     c62:	88 19       	sub	r24, r8
     c64:	99 09       	sbc	r25, r9
				t_wyniki[i] = t_miedzy * 30 ; 
     c66:	4e e1       	ldi	r20, 0x1E	; 30
     c68:	48 9f       	mul	r20, r24
     c6a:	90 01       	movw	r18, r0
     c6c:	49 9f       	mul	r20, r25
     c6e:	30 0d       	add	r19, r0
     c70:	11 24       	eor	r1, r1
     c72:	f8 01       	movw	r30, r16
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	e9 56       	subi	r30, 0x69	; 105
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	31 83       	std	Z+1, r19	; 0x01
     c7e:	20 83       	st	Z, r18
     c80:	1c c0       	rjmp	.+56     	; 0xcba <test3+0x32c>
			}
			else
			{
				liczBledy++;
     c82:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     c86:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     c8a:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     c8e:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	a1 1d       	adc	r26, r1
     c96:	b1 1d       	adc	r27, r1
     c98:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <liczBledy>
     c9c:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <liczBledy+0x1>
     ca0:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <liczBledy+0x2>
     ca4:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <liczBledy+0x3>
				t_wyniki[i] = 3000;
     ca8:	f8 01       	movw	r30, r16
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	e9 56       	subi	r30, 0x69	; 105
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	88 eb       	ldi	r24, 0xB8	; 184
     cb4:	9b e0       	ldi	r25, 0x0B	; 11
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
	int t_przycisk = 0;
	int t_miedzy = 0;
	int kolejnosc1[10] = {0, 1, 0, 2, 0, 2, 1, 2, 1, 0};
		
	//PÊTLA PO KA¯DEJ
	for(int i=0; i<10; i++)
     cba:	0f 5f       	subi	r16, 0xFF	; 255
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	0a 30       	cpi	r16, 0x0A	; 10
     cc0:	11 05       	cpc	r17, r1
     cc2:	0c f4       	brge	.+2      	; 0xcc6 <test3+0x338>
     cc4:	83 ce       	rjmp	.-762    	; 0x9cc <test3+0x3e>
				t_wyniki[i] = 3000;
			}	
		}
	}
	return;
}
     cc6:	64 96       	adiw	r28, 0x14	; 20
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	df 90       	pop	r13
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	08 95       	ret

00000cea <LCD_Action>:
	_delay_ms(2);
}

void LCD_Action( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
     cea:	9b b1       	in	r25, 0x0b	; 11
     cec:	9f 70       	andi	r25, 0x0F	; 15
     cee:	28 2f       	mov	r18, r24
     cf0:	20 7f       	andi	r18, 0xF0	; 240
     cf2:	92 2b       	or	r25, r18
     cf4:	9b b9       	out	0x0b, r25	; 11
	LCD_Port &= ~ (1<<RSPIN);
     cf6:	9b b1       	in	r25, 0x0b	; 11
     cf8:	9e 7f       	andi	r25, 0xFE	; 254
     cfa:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1<<ENPIN);
     cfc:	9b b1       	in	r25, 0x0b	; 11
     cfe:	92 60       	ori	r25, 0x02	; 2
     d00:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d02:	35 e0       	ldi	r19, 0x05	; 5
     d04:	3a 95       	dec	r19
     d06:	f1 f7       	brne	.-4      	; 0xd04 <LCD_Action+0x1a>
     d08:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<ENPIN);
     d0a:	9b b1       	in	r25, 0x0b	; 11
     d0c:	9d 7f       	andi	r25, 0xFD	; 253
     d0e:	9b b9       	out	0x0b, r25	; 11
     d10:	ef e1       	ldi	r30, 0x1F	; 31
     d12:	f3 e0       	ldi	r31, 0x03	; 3
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_Action+0x2a>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <LCD_Action+0x30>
     d1a:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
     d1c:	2b b1       	in	r18, 0x0b	; 11
     d1e:	f0 e1       	ldi	r31, 0x10	; 16
     d20:	8f 9f       	mul	r24, r31
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	92 2f       	mov	r25, r18
     d28:	9f 70       	andi	r25, 0x0F	; 15
     d2a:	89 2b       	or	r24, r25
     d2c:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<ENPIN);
     d2e:	8b b1       	in	r24, 0x0b	; 11
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	8b b9       	out	0x0b, r24	; 11
     d34:	35 e0       	ldi	r19, 0x05	; 5
     d36:	3a 95       	dec	r19
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCD_Action+0x4c>
     d3a:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<ENPIN);
     d3c:	8b b1       	in	r24, 0x0b	; 11
     d3e:	8d 7f       	andi	r24, 0xFD	; 253
     d40:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	9f e1       	ldi	r25, 0x1F	; 31
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <LCD_Action+0x5c>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <LCD_Action+0x62>
     d4c:	00 00       	nop
     d4e:	08 95       	ret

00000d50 <LCD_Init>:
	return;
}

void LCD_Init (void)
{
	LCD_DPin = 0xFF;		// LCD Pin (D4-D7)
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	8a b9       	out	0x0a, r24	; 10
     d54:	8f e5       	ldi	r24, 0x5F	; 95
     d56:	9a ee       	ldi	r25, 0xEA	; 234
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <LCD_Init+0x8>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <LCD_Init+0xe>
     d5e:	00 00       	nop
	_delay_ms(15);		
	LCD_Action(0x02);		//4-Bit Control
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Action(0x28);       //Control Matrix 4-Bit
     d66:	88 e2       	ldi	r24, 0x28	; 40
     d68:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Action(0x0c);       //Disable Cursor
     d6c:	8c e0       	ldi	r24, 0x0C	; 12
     d6e:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Action(0x06);       //Move Cursor
     d72:	86 e0       	ldi	r24, 0x06	; 6
     d74:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Action(0x01);       //Clean LCD
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
     d7e:	8f e3       	ldi	r24, 0x3F	; 63
     d80:	9f e1       	ldi	r25, 0x1F	; 31
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCD_Init+0x32>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <LCD_Init+0x38>
     d88:	00 00       	nop
     d8a:	08 95       	ret

00000d8c <LCD_Clear>:
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	9f e1       	ldi	r25, 0x1F	; 31
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <LCD_Clear+0xa>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <LCD_Clear+0x10>
     d9c:	00 00       	nop
	_delay_ms(2);			
	LCD_Action (0x80);		
     d9e:	80 e8       	ldi	r24, 0x80	; 128
     da0:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
     da4:	08 95       	ret

00000da6 <LCD_Print>:
}

void LCD_Print (char *str)
{
     da6:	fc 01       	movw	r30, r24
	int i;
	for(i=0; str[i]!=0; i++)
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	34 c0       	rjmp	.+104    	; 0xe16 <LCD_Print+0x70>
	{
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);
     dae:	8b b1       	in	r24, 0x0b	; 11
     db0:	8f 70       	andi	r24, 0x0F	; 15
     db2:	90 7f       	andi	r25, 0xF0	; 240
     db4:	98 2b       	or	r25, r24
     db6:	9b b9       	out	0x0b, r25	; 11
		LCD_Port |= (1<<RSPIN);
     db8:	8b b1       	in	r24, 0x0b	; 11
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	8b b9       	out	0x0b, r24	; 11
		LCD_Port|= (1<<ENPIN);
     dbe:	8b b1       	in	r24, 0x0b	; 11
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	8a 95       	dec	r24
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCD_Print+0x20>
     dca:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
     dcc:	8b b1       	in	r24, 0x0b	; 11
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	8b b9       	out	0x0b, r24	; 11
     dd2:	8f e1       	ldi	r24, 0x1F	; 31
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <LCD_Print+0x30>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <LCD_Print+0x36>
     ddc:	00 00       	nop
		_delay_us(200);
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);
     dde:	4b b1       	in	r20, 0x0b	; 11
     de0:	9c 91       	ld	r25, X
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	98 9f       	mul	r25, r24
     de6:	90 01       	movw	r18, r0
     de8:	11 24       	eor	r1, r1
     dea:	94 2f       	mov	r25, r20
     dec:	9f 70       	andi	r25, 0x0F	; 15
     dee:	29 2b       	or	r18, r25
     df0:	2b b9       	out	0x0b, r18	; 11
		LCD_Port |= (1<<ENPIN);
     df2:	9b b1       	in	r25, 0x0b	; 11
     df4:	92 60       	ori	r25, 0x02	; 2
     df6:	9b b9       	out	0x0b, r25	; 11
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	9a 95       	dec	r25
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <LCD_Print+0x54>
     dfe:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
     e00:	9b b1       	in	r25, 0x0b	; 11
     e02:	9d 7f       	andi	r25, 0xFD	; 253
     e04:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e06:	8f e3       	ldi	r24, 0x3F	; 63
     e08:	9f e1       	ldi	r25, 0x1F	; 31
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <LCD_Print+0x64>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <LCD_Print+0x6a>
     e10:	00 00       	nop
}

void LCD_Print (char *str)
{
	int i;
	for(i=0; str[i]!=0; i++)
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	df 01       	movw	r26, r30
     e18:	a6 0f       	add	r26, r22
     e1a:	b7 1f       	adc	r27, r23
     e1c:	9c 91       	ld	r25, X
     e1e:	91 11       	cpse	r25, r1
     e20:	c6 cf       	rjmp	.-116    	; 0xdae <LCD_Print+0x8>
		LCD_Port |= (1<<ENPIN);
		_delay_us(1);
		LCD_Port &= ~ (1<<ENPIN);
		_delay_ms(2);
	}
}
     e22:	08 95       	ret

00000e24 <main>:
		clockp = 0;
	}
}

int main(void)
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	a0 97       	sbiw	r28, 0x20	; 32
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	/* WE: 13, 12, 11 pin Arduino: PB5, PB4, PB3 -> 0 
	//WY: -> 1
	//LCD : 10 (RS), 8 (E), PD0, PD1, PD4, PD5,	PD6, PD7    
	//DIODY: 5 (GRE), 6 (RED), 9 (YEL) piny Arduino:
			 PB0,	  PB2,	   PB1 */
	DDRB = 0b00000111;
     e38:	87 e0       	ldi	r24, 0x07	; 7
     e3a:	84 b9       	out	0x04, r24	; 4
	//KOMUNIKAT ROZPOCZYNAJACY NA LCD :
	LCD_Init(); 
     e3c:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCD_Init>
	LCD_Print("PRESS ANY SWITCH");	
     e40:	80 e4       	ldi	r24, 0x40	; 64
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	LCD_Action(0xC0);
     e48:	80 ec       	ldi	r24, 0xC0	; 192
     e4a:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Print("TO START TEST");
     e4e:	81 e5       	ldi	r24, 0x51	; 81
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	//CZEKANIE NA U¯YTKOWNIKA
	while(seedToTest == 0) {
     e56:	67 c0       	rjmp	.+206    	; 0xf26 <main+0x102>
		if (PINB & (1<< PINB3)) {
     e58:	1b 9b       	sbis	0x03, 3	; 3
     e5a:	13 c0       	rjmp	.+38     	; 0xe82 <main+0x5e>
			seedToTest++;
     e5c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     e60:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     e64:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     e68:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	a1 1d       	adc	r26, r1
     e70:	b1 1d       	adc	r27, r1
     e72:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     e76:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     e7a:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     e7e:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
		}
		if (PINB & (1<< PINB4)) {
     e82:	1c 9b       	sbis	0x03, 4	; 3
     e84:	27 c0       	rjmp	.+78     	; 0xed4 <main+0xb0>
			seedToTest += 80;
     e86:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     e8a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     e8e:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     e92:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     e96:	80 5b       	subi	r24, 0xB0	; 176
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	af 4f       	sbci	r26, 0xFF	; 255
     e9c:	bf 4f       	sbci	r27, 0xFF	; 255
     e9e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     ea2:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     ea6:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     eaa:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
			seedToTest++;
     eae:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     eb2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     eb6:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     eba:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	a1 1d       	adc	r26, r1
     ec2:	b1 1d       	adc	r27, r1
     ec4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     ec8:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     ecc:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     ed0:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
		}
		if (PINB & (1<< PINB5)) {
     ed4:	1d 9b       	sbis	0x03, 5	; 3
     ed6:	27 c0       	rjmp	.+78     	; 0xf26 <main+0x102>
			seedToTest += 160;
     ed8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     edc:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     ee0:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     ee4:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     ee8:	80 56       	subi	r24, 0x60	; 96
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	af 4f       	sbci	r26, 0xFF	; 255
     eee:	bf 4f       	sbci	r27, 0xFF	; 255
     ef0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     ef4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     ef8:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     efc:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
			seedToTest++;
     f00:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     f04:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     f08:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     f0c:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	a1 1d       	adc	r26, r1
     f14:	b1 1d       	adc	r27, r1
     f16:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     f1a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     f1e:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     f22:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
	LCD_Init(); 
	LCD_Print("PRESS ANY SWITCH");	
	LCD_Action(0xC0);
	LCD_Print("TO START TEST");
	//CZEKANIE NA U¯YTKOWNIKA
	while(seedToTest == 0) {
     f26:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     f2a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     f2e:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     f32:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     f36:	89 2b       	or	r24, r25
     f38:	8a 2b       	or	r24, r26
     f3a:	8b 2b       	or	r24, r27
     f3c:	09 f4       	brne	.+2      	; 0xf40 <main+0x11c>
     f3e:	8c cf       	rjmp	.-232    	; 0xe58 <main+0x34>
			seedToTest += 160;
			seedToTest++;
		}	
	}
	//ROZPOCZYNANIE
	LCD_Clear();
     f40:	0e 94 c6 06 	call	0xd8c	; 0xd8c <LCD_Clear>
	LCD_Print("STARTING...");	
     f44:	8f e5       	ldi	r24, 0x5F	; 95
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
     f4c:	2f ef       	ldi	r18, 0xFF	; 255
     f4e:	8b e7       	ldi	r24, 0x7B	; 123
     f50:	92 e9       	ldi	r25, 0x92	; 146
     f52:	21 50       	subi	r18, 0x01	; 1
     f54:	80 40       	sbci	r24, 0x00	; 0
     f56:	90 40       	sbci	r25, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <main+0x12e>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <main+0x138>
     f5c:	00 00       	nop
	_delay_ms(3000);
	LCD_Clear();
     f5e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <LCD_Clear>
	// USTAWIENIE TIMER
	timer_setup();
     f62:	0e 94 e5 00 	call	0x1ca	; 0x1ca <timer_setup>
	//WYBÓR TESTU 1-3
	srand(seedToTest);
     f66:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
     f6a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <__data_end+0x1>
     f6e:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <__data_end+0x2>
     f72:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <__data_end+0x3>
     f76:	0e 94 9f 08 	call	0x113e	; 0x113e <srand>
	int wybor = rand()%300;
     f7a:	0e 94 9a 08 	call	0x1134	; 0x1134 <rand>
     f7e:	6c e2       	ldi	r22, 0x2C	; 44
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodhi4>
	wybor = (int)wybor/100;
     f86:	64 e6       	ldi	r22, 0x64	; 100
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodhi4>
	switch(wybor)
     f8e:	61 30       	cpi	r22, 0x01	; 1
     f90:	71 05       	cpc	r23, r1
     f92:	41 f0       	breq	.+16     	; 0xfa4 <main+0x180>
     f94:	62 30       	cpi	r22, 0x02	; 2
     f96:	71 05       	cpc	r23, r1
     f98:	41 f0       	breq	.+16     	; 0xfaa <main+0x186>
     f9a:	67 2b       	or	r22, r23
     f9c:	41 f4       	brne	.+16     	; 0xfae <main+0x18a>
	{
		case 0: test2(); break;
     f9e:	0e 94 19 03 	call	0x632	; 0x632 <test2>
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <main+0x18a>
		case 1: test1(); break;
     fa4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <test1>
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <main+0x18a>
		case 2: test3(); break;
     faa:	0e 94 c7 04 	call	0x98e	; 0x98e <test3>
	}
	// WYNIKI 
	czasMin = minTime(t_wyniki, 10);
     fae:	6a e0       	ldi	r22, 0x0A	; 10
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	87 e9       	ldi	r24, 0x97	; 151
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 ca 00 	call	0x194	; 0x194 <minTime>
     fba:	09 2e       	mov	r0, r25
     fbc:	00 0c       	add	r0, r0
     fbe:	aa 0b       	sbc	r26, r26
     fc0:	bb 0b       	sbc	r27, r27
     fc2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <czasMin>
     fc6:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <czasMin+0x1>
     fca:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <czasMin+0x2>
     fce:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <czasMin+0x3>
	char showTime [16];
	itoa(czasMin,showTime,10);
     fd2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <czasMin>
     fd6:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <czasMin+0x1>
     fda:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <czasMin+0x2>
     fde:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <czasMin+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	0e 94 aa 08 	call	0x1154	; 0x1154 <__itoa_ncheck>
	char showLbBledow [16];
	itoa(liczBledy,showLbBledow,10);
     fee:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <liczBledy>
     ff2:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <liczBledy+0x1>
     ff6:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <liczBledy+0x2>
     ffa:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <liczBledy+0x3>
     ffe:	4a e0       	ldi	r20, 0x0A	; 10
    1000:	be 01       	movw	r22, r28
    1002:	6f 5e       	subi	r22, 0xEF	; 239
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	0e 94 aa 08 	call	0x1154	; 0x1154 <__itoa_ncheck>
	// WYWIETL WYNIKI NA WYWIETLACZU 
	LCD_Print("Min time: ");
    100a:	8b e6       	ldi	r24, 0x6B	; 107
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	LCD_Print(showTime);
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	LCD_Print("ms");
    101a:	86 e7       	ldi	r24, 0x76	; 118
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	LCD_Action(0xC0);
    1022:	80 ec       	ldi	r24, 0xC0	; 192
    1024:	0e 94 75 06 	call	0xcea	; 0xcea <LCD_Action>
	LCD_Print("Mistakes: ");
    1028:	89 e7       	ldi	r24, 0x79	; 121
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
	LCD_Print(showLbBledow);
    1030:	ce 01       	movw	r24, r28
    1032:	41 96       	adiw	r24, 0x11	; 17
    1034:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Print>
    1038:	2f ef       	ldi	r18, 0xFF	; 255
    103a:	83 e2       	ldi	r24, 0x23	; 35
    103c:	94 ef       	ldi	r25, 0xF4	; 244
    103e:	21 50       	subi	r18, 0x01	; 1
    1040:	80 40       	sbci	r24, 0x00	; 0
    1042:	90 40       	sbci	r25, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <main+0x21a>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <main+0x224>
    1048:	00 00       	nop
    104a:	ff cf       	rjmp	.-2      	; 0x104a <main+0x226>

0000104c <__divmodhi4>:
    104c:	97 fb       	bst	r25, 7
    104e:	07 2e       	mov	r0, r23
    1050:	16 f4       	brtc	.+4      	; 0x1056 <__divmodhi4+0xa>
    1052:	00 94       	com	r0
    1054:	07 d0       	rcall	.+14     	; 0x1064 <__divmodhi4_neg1>
    1056:	77 fd       	sbrc	r23, 7
    1058:	09 d0       	rcall	.+18     	; 0x106c <__divmodhi4_neg2>
    105a:	0e 94 3a 08 	call	0x1074	; 0x1074 <__udivmodhi4>
    105e:	07 fc       	sbrc	r0, 7
    1060:	05 d0       	rcall	.+10     	; 0x106c <__divmodhi4_neg2>
    1062:	3e f4       	brtc	.+14     	; 0x1072 <__divmodhi4_exit>

00001064 <__divmodhi4_neg1>:
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__divmodhi4_neg2>:
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255

00001072 <__divmodhi4_exit>:
    1072:	08 95       	ret

00001074 <__udivmodhi4>:
    1074:	aa 1b       	sub	r26, r26
    1076:	bb 1b       	sub	r27, r27
    1078:	51 e1       	ldi	r21, 0x11	; 17
    107a:	07 c0       	rjmp	.+14     	; 0x108a <__udivmodhi4_ep>

0000107c <__udivmodhi4_loop>:
    107c:	aa 1f       	adc	r26, r26
    107e:	bb 1f       	adc	r27, r27
    1080:	a6 17       	cp	r26, r22
    1082:	b7 07       	cpc	r27, r23
    1084:	10 f0       	brcs	.+4      	; 0x108a <__udivmodhi4_ep>
    1086:	a6 1b       	sub	r26, r22
    1088:	b7 0b       	sbc	r27, r23

0000108a <__udivmodhi4_ep>:
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	5a 95       	dec	r21
    1090:	a9 f7       	brne	.-22     	; 0x107c <__udivmodhi4_loop>
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	08 95       	ret

0000109c <do_rand>:
    109c:	8f 92       	push	r8
    109e:	9f 92       	push	r9
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	68 81       	ld	r22, Y
    10b4:	79 81       	ldd	r23, Y+1	; 0x01
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	81 05       	cpc	r24, r1
    10c0:	91 05       	cpc	r25, r1
    10c2:	21 f4       	brne	.+8      	; 0x10cc <do_rand+0x30>
    10c4:	64 e2       	ldi	r22, 0x24	; 36
    10c6:	79 ed       	ldi	r23, 0xD9	; 217
    10c8:	8b e5       	ldi	r24, 0x5B	; 91
    10ca:	97 e0       	ldi	r25, 0x07	; 7
    10cc:	2d e1       	ldi	r18, 0x1D	; 29
    10ce:	33 ef       	ldi	r19, 0xF3	; 243
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	0e 94 df 08 	call	0x11be	; 0x11be <__divmodsi4>
    10d8:	49 01       	movw	r8, r18
    10da:	5a 01       	movw	r10, r20
    10dc:	9b 01       	movw	r18, r22
    10de:	ac 01       	movw	r20, r24
    10e0:	a7 ea       	ldi	r26, 0xA7	; 167
    10e2:	b1 e4       	ldi	r27, 0x41	; 65
    10e4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__muluhisi3>
    10e8:	6b 01       	movw	r12, r22
    10ea:	7c 01       	movw	r14, r24
    10ec:	ac ee       	ldi	r26, 0xEC	; 236
    10ee:	b4 ef       	ldi	r27, 0xF4	; 244
    10f0:	a5 01       	movw	r20, r10
    10f2:	94 01       	movw	r18, r8
    10f4:	0e 94 0c 09 	call	0x1218	; 0x1218 <__mulohisi3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8c 0d       	add	r24, r12
    10fe:	9d 1d       	adc	r25, r13
    1100:	ae 1d       	adc	r26, r14
    1102:	bf 1d       	adc	r27, r15
    1104:	b7 ff       	sbrs	r27, 7
    1106:	03 c0       	rjmp	.+6      	; 0x110e <do_rand+0x72>
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	a1 09       	sbc	r26, r1
    110c:	b0 48       	sbci	r27, 0x80	; 128
    110e:	88 83       	st	Y, r24
    1110:	99 83       	std	Y+1, r25	; 0x01
    1112:	aa 83       	std	Y+2, r26	; 0x02
    1114:	bb 83       	std	Y+3, r27	; 0x03
    1116:	9f 77       	andi	r25, 0x7F	; 127
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	08 95       	ret

0000112e <rand_r>:
    112e:	0e 94 4e 08 	call	0x109c	; 0x109c <do_rand>
    1132:	08 95       	ret

00001134 <rand>:
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 4e 08 	call	0x109c	; 0x109c <do_rand>
    113c:	08 95       	ret

0000113e <srand>:
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    114a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    114e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1152:	08 95       	ret

00001154 <__itoa_ncheck>:
    1154:	bb 27       	eor	r27, r27
    1156:	4a 30       	cpi	r20, 0x0A	; 10
    1158:	31 f4       	brne	.+12     	; 0x1166 <__itoa_ncheck+0x12>
    115a:	99 23       	and	r25, r25
    115c:	22 f4       	brpl	.+8      	; 0x1166 <__itoa_ncheck+0x12>
    115e:	bd e2       	ldi	r27, 0x2D	; 45
    1160:	90 95       	com	r25
    1162:	81 95       	neg	r24
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__utoa_common>

0000116a <__utoa_ncheck>:
    116a:	bb 27       	eor	r27, r27

0000116c <__utoa_common>:
    116c:	fb 01       	movw	r30, r22
    116e:	55 27       	eor	r21, r21
    1170:	aa 27       	eor	r26, r26
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	aa 1f       	adc	r26, r26
    1178:	a4 17       	cp	r26, r20
    117a:	10 f0       	brcs	.+4      	; 0x1180 <__utoa_common+0x14>
    117c:	a4 1b       	sub	r26, r20
    117e:	83 95       	inc	r24
    1180:	50 51       	subi	r21, 0x10	; 16
    1182:	b9 f7       	brne	.-18     	; 0x1172 <__utoa_common+0x6>
    1184:	a0 5d       	subi	r26, 0xD0	; 208
    1186:	aa 33       	cpi	r26, 0x3A	; 58
    1188:	08 f0       	brcs	.+2      	; 0x118c <__utoa_common+0x20>
    118a:	a9 5d       	subi	r26, 0xD9	; 217
    118c:	a1 93       	st	Z+, r26
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	79 f7       	brne	.-34     	; 0x1170 <__utoa_common+0x4>
    1192:	b1 11       	cpse	r27, r1
    1194:	b1 93       	st	Z+, r27
    1196:	11 92       	st	Z+, r1
    1198:	cb 01       	movw	r24, r22
    119a:	0c 94 cf 08 	jmp	0x119e	; 0x119e <strrev>

0000119e <strrev>:
    119e:	dc 01       	movw	r26, r24
    11a0:	fc 01       	movw	r30, r24
    11a2:	67 2f       	mov	r22, r23
    11a4:	71 91       	ld	r23, Z+
    11a6:	77 23       	and	r23, r23
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <strrev+0x4>
    11aa:	32 97       	sbiw	r30, 0x02	; 2
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <strrev+0x18>
    11ae:	7c 91       	ld	r23, X
    11b0:	6d 93       	st	X+, r22
    11b2:	70 83       	st	Z, r23
    11b4:	62 91       	ld	r22, -Z
    11b6:	ae 17       	cp	r26, r30
    11b8:	bf 07       	cpc	r27, r31
    11ba:	c8 f3       	brcs	.-14     	; 0x11ae <strrev+0x10>
    11bc:	08 95       	ret

000011be <__divmodsi4>:
    11be:	05 2e       	mov	r0, r21
    11c0:	97 fb       	bst	r25, 7
    11c2:	1e f4       	brtc	.+6      	; 0x11ca <__divmodsi4+0xc>
    11c4:	00 94       	com	r0
    11c6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__negsi2>
    11ca:	57 fd       	sbrc	r21, 7
    11cc:	07 d0       	rcall	.+14     	; 0x11dc <__divmodsi4_neg2>
    11ce:	0e 94 11 09 	call	0x1222	; 0x1222 <__udivmodsi4>
    11d2:	07 fc       	sbrc	r0, 7
    11d4:	03 d0       	rcall	.+6      	; 0x11dc <__divmodsi4_neg2>
    11d6:	4e f4       	brtc	.+18     	; 0x11ea <__divmodsi4_exit>
    11d8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__negsi2>

000011dc <__divmodsi4_neg2>:
    11dc:	50 95       	com	r21
    11de:	40 95       	com	r20
    11e0:	30 95       	com	r19
    11e2:	21 95       	neg	r18
    11e4:	3f 4f       	sbci	r19, 0xFF	; 255
    11e6:	4f 4f       	sbci	r20, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255

000011ea <__divmodsi4_exit>:
    11ea:	08 95       	ret

000011ec <__negsi2>:
    11ec:	90 95       	com	r25
    11ee:	80 95       	com	r24
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	08 95       	ret

000011fc <__muluhisi3>:
    11fc:	0e 94 33 09 	call	0x1266	; 0x1266 <__umulhisi3>
    1200:	a5 9f       	mul	r26, r21
    1202:	90 0d       	add	r25, r0
    1204:	b4 9f       	mul	r27, r20
    1206:	90 0d       	add	r25, r0
    1208:	a4 9f       	mul	r26, r20
    120a:	80 0d       	add	r24, r0
    120c:	91 1d       	adc	r25, r1
    120e:	11 24       	eor	r1, r1
    1210:	08 95       	ret

00001212 <__mulshisi3>:
    1212:	b7 ff       	sbrs	r27, 7
    1214:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__muluhisi3>

00001218 <__mulohisi3>:
    1218:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__muluhisi3>
    121c:	82 1b       	sub	r24, r18
    121e:	93 0b       	sbc	r25, r19
    1220:	08 95       	ret

00001222 <__udivmodsi4>:
    1222:	a1 e2       	ldi	r26, 0x21	; 33
    1224:	1a 2e       	mov	r1, r26
    1226:	aa 1b       	sub	r26, r26
    1228:	bb 1b       	sub	r27, r27
    122a:	fd 01       	movw	r30, r26
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <__udivmodsi4_ep>

0000122e <__udivmodsi4_loop>:
    122e:	aa 1f       	adc	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	a2 17       	cp	r26, r18
    1238:	b3 07       	cpc	r27, r19
    123a:	e4 07       	cpc	r30, r20
    123c:	f5 07       	cpc	r31, r21
    123e:	20 f0       	brcs	.+8      	; 0x1248 <__udivmodsi4_ep>
    1240:	a2 1b       	sub	r26, r18
    1242:	b3 0b       	sbc	r27, r19
    1244:	e4 0b       	sbc	r30, r20
    1246:	f5 0b       	sbc	r31, r21

00001248 <__udivmodsi4_ep>:
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a 94       	dec	r1
    1252:	69 f7       	brne	.-38     	; 0x122e <__udivmodsi4_loop>
    1254:	60 95       	com	r22
    1256:	70 95       	com	r23
    1258:	80 95       	com	r24
    125a:	90 95       	com	r25
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	08 95       	ret

00001266 <__umulhisi3>:
    1266:	a2 9f       	mul	r26, r18
    1268:	b0 01       	movw	r22, r0
    126a:	b3 9f       	mul	r27, r19
    126c:	c0 01       	movw	r24, r0
    126e:	a3 9f       	mul	r26, r19
    1270:	70 0d       	add	r23, r0
    1272:	81 1d       	adc	r24, r1
    1274:	11 24       	eor	r1, r1
    1276:	91 1d       	adc	r25, r1
    1278:	b2 9f       	mul	r27, r18
    127a:	70 0d       	add	r23, r0
    127c:	81 1d       	adc	r24, r1
    127e:	11 24       	eor	r1, r1
    1280:	91 1d       	adc	r25, r1
    1282:	08 95       	ret

00001284 <_exit>:
    1284:	f8 94       	cli

00001286 <__stop_program>:
    1286:	ff cf       	rjmp	.-2      	; 0x1286 <__stop_program>
